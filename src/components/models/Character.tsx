/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 character.glb --types --transform 
Files: character.glb [536.54KB] > /Users/daniele.guido/Projects/c2dh/3dstories-template/public/models/character-transformed.glb [440.99KB] (18%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'
import { SkeletonUtils } from 'three-stdlib'

type ActionName = 'Idle' | 'Talking'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Daniele: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
    Ctrl_ArmPole_IK_Left: THREE.Bone
    Ctrl_Hand_IK_Left: THREE.Bone
    Ctrl_ArmPole_IK_Right: THREE.Bone
    Ctrl_Hand_IK_Right: THREE.Bone
    Ctrl_Foot_IK_Left: THREE.Bone
    Ctrl_LegPole_IK_Left: THREE.Bone
    Ctrl_Foot_IK_Right: THREE.Bone
    Ctrl_LegPole_IK_Right: THREE.Bone
    Ctrl_Master: THREE.Bone
  }
  materials: {
    Material: THREE.MeshBasicMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: any) {
  const group = React.useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/character-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Scene'>
        <group name='Armature'>
          <primitive object={nodes.mixamorigHips} />
          <primitive object={nodes.Ctrl_ArmPole_IK_Left} />
          <primitive object={nodes.Ctrl_Hand_IK_Left} />
          <primitive object={nodes.Ctrl_ArmPole_IK_Right} />
          <primitive object={nodes.Ctrl_Hand_IK_Right} />
          <primitive object={nodes.Ctrl_Foot_IK_Left} />
          <primitive object={nodes.Ctrl_LegPole_IK_Left} />
          <primitive object={nodes.Ctrl_Foot_IK_Right} />
          <primitive object={nodes.Ctrl_LegPole_IK_Right} />
        </group>
        <primitive object={nodes.Ctrl_Master} />
        <skinnedMesh
          name='Daniele'
          geometry={nodes.Daniele.geometry}
          material={materials.Material}
          skeleton={nodes.Daniele.skeleton}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/character-transformed.glb')
